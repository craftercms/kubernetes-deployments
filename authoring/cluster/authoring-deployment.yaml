# ALB Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: authoring-ingress
  annotations:
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/healthcheck-port: '8080'
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /studio/api/2/monitoring/status.json?token=defaultManagementToken
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=600
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: authoring-service-headless
                port:
                  number: 8080
---
# ALB Ingress for the Git HTTPS Server (for internal use only)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: authoring-git-https-ingress
  annotations:
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/healthcheck-port: '8080'
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /studio/api/2/monitoring/status.json?token=defaultManagementToken
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=600
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /studio/api/2/monitoring/status.json
            pathType: Exact
            backend:
              service:
                name: authoring-service-headless
                port:
                  number: 8080
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: authoring-service-headless
                port:
                  number: 443
---
# Authoring Headless service
apiVersion: v1
kind: Service
metadata:
  name: authoring-service-headless
  labels:
    hazelcastClusterName: studio_hazelcast_cluster
spec:
  clusterIP: None
  selector:
    component: authoring
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: git-https
      protocol: TCP
      port: 443
      targetPort: 443
    - name: db-default
      protocol: TCP
      port: 3306
      targetPort: 3306
    - name: hazelcast
      protocol: TCP
      port: 5701
      targetPort: 5701
---
# Authoring Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authoring
spec:
  serviceName: authoring-service-headless
  replicas: 2
  updateStrategy:
    type: OnDelete
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      component: authoring
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi
  template:
    metadata:
      labels:
        component: authoring
    spec:
      volumes:
        - name: git-https-server-cert-files
          secret:
            secretName: git-https-server-cert-files    
        - name: crafter-license
          secret:
            secretName: crafter-license
        - name: studio-config
          configMap:
            name: studio-config
        - name: logs
          emptyDir: {}
        - name: temp
          emptyDir: {}
        - name: mnt
          emptyDir: {}
      initContainers:
        # Modifies the crafter-setenv.sh to use the pod ordinal index + offset for the CRAFTER_DB_CLUSTER_SERVER_ID instead of an autogenerated number based on the IP
        - name: crafter-setenv-fixer
          image: craftercms/authoring_tomcat:4.0.2E-BETA
          volumeMounts:
            - name: mnt
              mountPath: /mnt
          command: ["bash","-c"]
          args: ["sed 's/$BIN/$((100 + ${HOSTNAME##*-}))/' /opt/crafter/bin/crafter-setenv.sh > /mnt/crafter-setenv.sh "]
      containers:
        # Elasticsearch container
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
          readinessProbe:
            httpGet:
              path: /_cat/nodes?h=uptime
              port: 9200
            initialDelaySeconds: 15
            periodSeconds: 10
          ports:
            - containerPort: 9200
          volumeMounts:
            - name: data
              subPath: indexes-es
              mountPath: /usr/share/elasticsearch/data
            - name: logs
              subPath: elasticsearch
              mountPath: /usr/share/elasticsearch/logs
          env:
            - name: discovery.type
              value: single-node
            - name: ES_JAVA_OPTS
              value: "-server -Xss1024K -XX:MaxRAMPercentage=80.0"
          resources:
            requests:
              cpu: 500m
              memory: 2.5Gi
            limits:
              cpu: 1
              memory: 2.5Gi
        # Tomcat container
        - name: tomcat
          image: craftercms/authoring_tomcat:4.0.2E-BETA
          startupProbe:
            httpGet:
              path: /api/1/monitoring/status.json?token=defaultManagementToken
              port: 8080
            failureThreshold: 30
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /api/1/monitoring/status.json?token=defaultManagementToken
              port: 8080
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/1/monitoring/status.json?token=defaultManagementToken
              port: 8080
            failureThreshold: 10
            timeoutSeconds: 60
            periodSeconds: 60
          ports:
            - name: http
              protocol: TCP
              containerPort: 8080
            - name: db-default
              protocol: TCP
              containerPort: 3306
            - name: hazelcast
              protocol: TCP
              containerPort: 5701              
          volumeMounts:
            - name: mnt
              subPath: crafter-setenv.sh
              mountPath: /opt/crafter/bin/crafter-setenv.sh
              readOnly: true
            - name: crafter-license
              subPath: crafter.lic
              mountPath: /opt/crafter/bin/apache-tomcat/shared/classes/crafter/license/crafter.lic
              readOnly: true
            - name: data
              mountPath: /opt/crafter/data
            - name: temp
              mountPath: /opt/crafter/temp
            - name: logs
              mountPath: /opt/crafter/logs
            - name: studio-config
              subPath: studio-config-override.yaml
              mountPath: /opt/crafter/bin/apache-tomcat/shared/classes/crafter/studio/extension/studio-config-override.yaml
              readOnly: true
            - name: studio-config
              subPath: hazelcast-config.yaml
              mountPath: /opt/crafter/bin/apache-tomcat/shared/classes/crafter/studio/extension/hazelcast-config.yaml
              readOnly: true
            - name: studio-config
              subPath: .gitconfig
              mountPath: /home/crafter/.gitconfig
              readOnly: true
          env:
            - name: CATALINA_OPTS
              # The extra params (starting with -add-modules) are recommended by Hazelcast for performance
              value: "-server -Xss1024K -XX:MaxRAMPercentage=80.0 --add-modules java.se --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.management/sun.management=ALL-UNNAMED --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED"
            - name: SPRING_PROFILES_ACTIVE
              value: "crafter.studio.dbClusterPrimaryReplica"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLUSTER_NODE_ADDRESS
              value: "$(POD_NAME).authoring-service-headless.default.svc.cluster.local"
            - name: MARIADB_CLUSTER_NODE_ADDRESS
              value: "$(CLUSTER_NODE_ADDRESS)"
            - name: MARIADB_CLUSTER_NODE_COUNT
              # This should match the replica count. Also update the config/studio/.gitconfig to specify sslVerify false
              # for the HTTPS URL of every replica/cluster node (if using a self-signed cert in Git HTTPS server)
              value: "2"
            - name: CLUSTER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: git-https-server-credentials
                  key: username
            - name: CLUSTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: git-https-server-credentials
                  key: password
          resources:
            requests:
              cpu: 1
              memory: 5Gi
            limits:
              cpu: 2
              memory: 5Gi
        # Deployer container
        - name: deployer
          image: craftercms/deployer:4.0.2E-BETA
          imagePullPolicy: "Always"
          startupProbe:
            httpGet:
              path: /api/1/monitoring/status?token=defaultManagementToken
              port: 9191
            failureThreshold: 60
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /api/1/monitoring/status?token=defaultManagementToken
              port: 9191
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/1/monitoring/status?token=defaultManagementToken
              port: 9191
            failureThreshold: 10
            timeoutSeconds: 60
            periodSeconds: 60       
          ports:
            - containerPort: 9191
          volumeMounts:
            - name: data
              mountPath: /opt/crafter/data
            - name: temp
              mountPath: /opt/crafter/temp
            - name: logs
              mountPath: /opt/crafter/logs
          env:
            - name: DEPLOYER_JAVA_OPTS
              value: "-server -Xss1024K -Xmx2G -XX:MaxRAMPercentage=80.0"
          resources:
            requests:
              cpu: 1
              memory: 2.5Gi
            limits:
              cpu: 2
              memory: 2.5Gi
        # Git HTTPS server container
        - name: git-https-server
          image: craftercms/git_https_server:4.0.2E-BETA
          imagePullPolicy: "Always"
          ports:
            - containerPort: 443
          volumeMounts:
            - name: git-https-server-cert-files
              subPath: server.crt
              mountPath: /usr/local/apache2/conf/server.crt
              readOnly: true
            - name: git-https-server-cert-files
              subPath: server.key
              mountPath: /usr/local/apache2/conf/server.key
              readOnly: true
            - name: data
              mountPath: /opt/crafter/data
          env:
            - name: GIT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: git-https-server-credentials
                  key: username
            - name: GIT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: git-https-server-credentials
                  key: password
